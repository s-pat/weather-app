{"version":3,"sources":["WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","card","width","marginTop","spacing","marginBottom","background","boxShadow","WeatherCard","props","classes","data","Card","className","CardContent","Typography","variant","cardTitle","city","country","component","condition","description","temperature","container","paper","display","flexDirection","alignItems","form","title","color","textfield","marginLeft","submit","margin","footerLink","textDecoration","App","useState","setData","setCity","error","setError","setCountry","flagErrors","setFlag","handleSubmit","event","a","preventDefault","console","log","fetch","res","ok","json","then","toUpperCase","weather","main","Math","round","temp","Container","maxWidth","onSubmit","TextField","id","label","value","onChange","target","inputProps","maxLength","required","Button","endIcon","Icon","type","Alert","severity","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"2WAQMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAK,CACHC,MAAO,OACPC,UAAWH,EAAMI,QAAQ,GACzBC,aAAc,OACdC,WAAY,UACZC,UAAW,+CAqBFC,EAjBK,SAACC,GACjB,IAAMC,EAAUZ,IACVa,EAAOF,EAAME,KAEnB,OAEE,kBAACC,EAAA,EAAD,CAAMC,UAAWH,EAAQT,MACzB,kBAACa,EAAA,EAAD,KACF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAWH,EAAQO,WAAYN,EAAKO,KAA7D,KAAqEP,EAAKQ,SAC1E,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,KAAKI,UAAU,MAAnC,sBAA4DT,EAAKU,UAAjE,KAA8EV,EAAKW,aACnF,kBAACP,EAAA,EAAD,CAAYC,QAAQ,KAAKI,UAAU,MAAnC,wBAA8DT,EAAKY,YAAnE,aCfEzB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCwB,UAAU,CACRtB,MAAO,QAGTuB,MAAO,CACLtB,UAAWH,EAAMI,QAAQ,GACzBsB,QAAS,OACTC,cAAe,SACfC,WAAY,UAGdC,KAAM,CACL3B,MAAO,OACNC,UAAWH,EAAMI,QAAQ,GACzBC,aAAc,OACdC,WAAY,UACZC,UAAW,uCAEbuB,MAAM,CACJ5B,MAAO,OACP6B,MAAO,aAETC,UAAU,CACNC,WAAY,OAEhBC,OAAQ,CACNC,OAAQnC,EAAMI,QAAQ,EAAG,KAAM,IAEjCH,KAAK,CACHC,MAAO,QAETkC,WAAW,CACTC,eAAgB,OAChBN,MAAO,YACPH,WAAY,SACZ1B,MAAO,YAqHIoC,MAlHf,WAEE,IAAM5B,EAAUZ,IAFH,EAGUyC,mBAAS,IAHnB,mBAGP5B,EAHO,KAGD6B,EAHC,OAIUD,mBAAS,IAJnB,mBAIPrB,EAJO,KAIDuB,EAJC,OAKYF,mBAAS,IALrB,mBAKPG,EALO,KAKAC,EALA,OAMgBJ,mBAAS,IANzB,mBAMPpB,EANO,KAMEyB,EANF,OAOgBL,oBAAS,GAPzB,mBAOPM,EAPO,KAOKC,EAPL,KAgBJC,EAAY,uCAAG,WAAMC,GAAN,eAAAC,EAAA,6DACpBD,EAAME,iBACNC,QAAQC,IAAIlC,EAAMC,GAFE,SAGAkC,MAAM,qDAAD,OAAsDnC,EAAtD,YAA8DC,EAA9D,2DAHL,QAGZmC,EAHY,QAIXC,IACPD,EAAIE,OACDC,MAAK,SAAAH,GAAG,OAAId,EAAQ,CACnB7B,KAAMA,EACNO,KAAMA,EACNC,QAASA,EAAQuC,cACjBrC,UAAWiC,EAAIK,QAAQ,GAAGC,KAC1BtC,YAAagC,EAAIK,QAAQ,GAAGrC,YAC5BC,YAAasC,KAAKC,MAAMR,EAAIM,KAAKG,UAEnCjB,GAAQ,IACRH,EAAS,MAKXH,EAAQ,CACN7B,KAAM,GACJO,KAAK,GACLC,QAAS,GACTE,UAAW,GACXC,YAAa,GACbC,YAAa,KAEjBoB,EACE,2BAEFG,GAAQ,IA/BU,2CAAH,sDAqCrB,OADEK,QAAQC,IAAIP,GAGV,kBAACmB,EAAA,EAAD,CAAWnD,UAAWH,EAAQc,UAAWyC,SAAS,MAEhD,yBAAKpD,UAAWH,EAAQe,OAE3B,0BAAMZ,UAAWH,EAAQmB,KAAMqC,SAAUnB,GACzC,kBAAC,IAAD,CAAOlC,UAAWH,EAAQoB,OAAO,kBAACf,EAAA,EAAD,CAAYC,QAAQ,MAApB,gBAGhC,kBAACmD,EAAA,EAAD,CACAtD,UAAWH,EAAQsB,UACnBoC,GAAG,oBACHC,MAAM,OACNC,MAAOpD,EACPqD,SA5De,SAACvB,GAChBP,EAAQO,EAAMwB,OAAOF,QA4DrBG,WAAY,CACVC,UAAW,IAEZC,UAAQ,IAET,kBAACR,EAAA,EAAD,CACAtD,UAAWH,EAAQsB,UACnBoC,GAAG,oBACHC,MAAM,UACNC,MAAOnD,EACPoD,SAnEkB,SAACvB,GACrBJ,EAAWI,EAAMwB,OAAOF,QAmEtBG,WAAY,CACVC,UAAW,IAEbC,UAAQ,IAKT,6BACA,kBAACC,EAAA,EAAD,CACG/D,UAAWH,EAAQwB,OACnBlB,QAAQ,YACRe,MAAM,UACN8C,QAAS,kBAACC,EAAA,EAAD,aACTC,KAAK,UALR,SAaAlC,EAAa,kBAAC,EAAD,CAAahC,UAAWH,EAAQT,KAAMU,KAAMA,IAAU,KAC3D,KAAR+B,EAAY,KAAO,kBAACsC,EAAA,EAAD,CAAOhE,QAAQ,SAASiE,SAAS,SAASvC,GAG5D,6BACA,kBAAC3B,EAAA,EAAD,KAAY,uBAAGF,UAAWH,EAAQ0B,WAAY8C,KAAK,4BAAvC,sBCnJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxD,GACLS,QAAQT,MAAMA,EAAMyD,c","file":"static/js/main.0b0a1aef.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container'\n\nconst useStyles = makeStyles((theme) => ({\n    card:{\n      width: '100%',\n      marginTop: theme.spacing(1),\n      marginBottom: '15px',\n      background: '#f7f7f7',\n      boxShadow: '0px 2px 2px 1px rgba(13, 15, 47, 0.924)'\n    \n    }\n  }));\nconst WeatherCard = (props) => {\n    const classes = useStyles();\n    const data = props.data;\n  \n    return(\n  \n      <Card className={classes.card}>\n      <CardContent>\n    <Typography variant=\"h5\" className={classes.cardTitle}>{data.city}, {data.country}</Typography>\n    <Typography variant=\"h5\" component=\"h2\">Current Condition: {data.condition}, {data.description}</Typography> \n    <Typography variant=\"h5\" component=\"h2\">Today's Temperature: {data.temperature }&#8457;</Typography> \n      \n      \n      </CardContent>\n    </Card> \n    )\n}\nexport default WeatherCard;","import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Title from '@material-ui/core/DialogTitle'\nimport Icon from '@material-ui/core/Icon';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography'\nimport Alert from '@material-ui/lab/Alert';\n\nimport './App.css';\nimport WeatherCard from './WeatherCard';\n\nconst useStyles = makeStyles((theme) => ({\n  container:{\n    width: '100%',\n    \n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  \n  form: {\n   width: '100%',\n    marginTop: theme.spacing(1),\n    marginBottom: '15px',\n    background: '#f7f7f7',\n    boxShadow: '0px 2px 2px rgba(13, 15, 47, 0.924)',\n  },\n  title:{\n    width: '100%',\n    color: 'slategrey',\n  },\n  textfield:{\n      marginLeft: '5% '\n  },\n  submit: {\n    margin: theme.spacing(3, 30.1, 2),\n  },\n  card:{\n    width: '100%'\n  },\n  footerLink:{\n    textDecoration: 'none',\n    color: 'slategrey',\n    alignItems: 'center',\n    width: '100%'\n  }\n}));\nfunction App() {\n  \n  const classes = useStyles();\n  const[data, setData] = useState({})\n  const[city, setCity] = useState('')\n  const[error, setError] = useState('')\n  const[country, setCountry] = useState('')\n  const[flagErrors, setFlag] = useState(false)\n  const handleCity = (event)=>{\n      setCity(event.target.value)\n     \n  }\n  const handleCountry = (event)=>{\n    setCountry(event.target.value)\n  \n  }\n    const  handleSubmit = async(event)=>{\n      event.preventDefault();\n      console.log(city, country)\n        const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=imperial&appid=8e0be2251dae4a629c7358238b2f7c60`);\n        if(res.ok){\n        res.json()\n          .then(res => setData({\n            data: data,\n            city: city,\n            country: country.toUpperCase(),\n            condition: res.weather[0].main,\n            description: res.weather[0].description,\n            temperature: Math.round(res.main.temp)\n          }),\n          setFlag(true))\n          setError('')\n        } \n        \n      \n      else{\n        setData({\n          data: \"\",\n            city:\"\",\n            country: \"\",\n            condition: \"\",\n            description: \"\",\n            temperature: \"\",\n        })\n        setError(\n          \"Invalid City or Country\"\n        )\n        setFlag(false)\n      }\n      \n    }\n\n    console.log(flagErrors)\n  return (\n    \n      <Container className={classes.container} maxWidth=\"xs\">\n         \n        <div className={classes.paper}>\n     \n     <form className={classes.form} onSubmit={handleSubmit} >\n     <Title className={classes.title}><Typography variant=\"h2\">\n      Weather App\n    </Typography></Title>\n      <TextField \n      className={classes.textfield}\n      id=\"standard-required\"\n      label=\"City\"\n      value={city}\n      onChange={handleCity}\n      inputProps={{\n        maxLength: 20\n      }}\n       required>\n         </TextField>\n      <TextField\n      className={classes.textfield}\n      id=\"standard-required\"\n      label=\"Country\"\n      value={country}\n      onChange={handleCountry}\n      inputProps={{\n        maxLength: 20\n      }}\n      required>\n\n      </TextField>\n     \n      \n     <br></br>\n     <Button\n        className={classes.submit}\n        variant=\"contained\"\n        color=\"default\"\n        endIcon={<Icon>send</Icon>}\n        type=\"submit\" \n        \n\n      > \n      Send\n      </Button>\n      </form>\n      \n    {flagErrors ? <WeatherCard className={classes.card} data={data}/> : null }\n    {error===''? null:  <Alert variant=\"filled\" severity=\"error\">{error}</Alert>}\n   \n    \n      <hr></hr>\n      <Typography><a className={classes.footerLink} href='https://sohanpatel.codes'>by sohan patel</a></Typography>\n      </div>\n    </Container>      \n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}